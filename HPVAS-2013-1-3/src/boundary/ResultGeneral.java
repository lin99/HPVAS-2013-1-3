/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package boundary;

import Model.Owner;
import Model.Pet;
import Model.Veterinarian;
import java.util.LinkedList;
import java.util.Queue;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author lin
 */
public class ResultGeneral extends javax.swing.JPanel implements
        EmbeddedHPVAPanel {

    private MainWindow mainWindow;
    private Pet[] resultsPet;
    private Veterinarian[] resultsVet;
    private Owner[] resultsOwner;

    /**
     * Creates new form Add
     * @param mainWindow 
     */
    public ResultGeneral(MainWindow mainWindow) {
        initComponents();
        this.mainWindow = mainWindow;
    }

    @Override
    public void save() throws IllegalArgumentException {
        //Does nothing
    }

    @Override
    public void update() {
        DefaultTableModel tableModel = (DefaultTableModel) tableResultGen.
                getModel();

        for (Owner owner : resultsOwner) {
            tableModel.addRow(new Object[] {
                owner.getName(),
                "Owner"
            });
        }

        for (Veterinarian vet : resultsVet) {
            tableModel.addRow(new Object[] {
                vet.getName(),
                "Veterinarian"
            });
        }

        for (Pet pet : resultsPet) {
            tableModel.addRow(new Object[] {
                pet.getName(),
                "Pet"
            });
        }
    }

    /**
     *
     * @param resultsPet
     * @param resultsVet
     * @param resultsOwner
     */
    public void setResults(Pet[] resultsPet, Veterinarian[] resultsVet,
            Owner[] resultsOwner) {
        this.resultsPet = resultsPet;
        this.resultsVet = resultsVet;
        this.resultsOwner = resultsOwner;
    }

    void setResults(Object[] petsPersons) {
        Queue<Owner> owners = new LinkedList<Owner>();
        Queue<Pet> pets = new LinkedList<Pet>();
        Queue<Veterinarian> vets = new LinkedList<Veterinarian>();

        for (Object petPerson : petsPersons) {
            if (petPerson instanceof Owner) {
                owners.offer((Owner) petPerson);
            } else if (petPerson instanceof Pet) {
                pets.offer((Pet) petPerson);
            } else if (petPerson instanceof Veterinarian) {
                vets.offer((Veterinarian) petPerson);
            }
        }

        this.resultsOwner = owners.toArray(new Owner[owners.size()]);
        this.resultsVet = vets.toArray(new Veterinarian[vets.size()]);
        this.resultsPet = pets.toArray(new Pet[pets.size()]);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableResultGen = new javax.swing.JTable();

        tableResultGen.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Type"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableResultGen.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tableResultGen);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableResultGen;
    // End of variables declaration//GEN-END:variables
}
